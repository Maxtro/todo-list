{"version":3,"sources":["components/Task.tsx","Redux/Reduser.ts","components/TaskContainer.tsx","App.tsx","serviceWorker.ts","Redux/ReduxStore.ts","index.tsx","components/Task.module.css"],"names":["Task","props","task","filter","done","map","key","id","className","style","taskDone","onClick","fontSize","title","initialState","taskText","isError","errorText","actions","text","type","payload","Reduser","state","action","taskArray","index","connector","connect","updateInputText","dispatch","addNewTask","deleteTasks","validateError","addTask","length","replace","Card","width","boxShadow","Header","float","cursor","Body","Footer","Form","Control","size","value","onChange","event","target","onKeyPress","error","App","Boolean","window","location","hostname","match","rootReduser","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message","module","exports"],"mappings":"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","file":"static/js/main.3c312311.chunk.js","sourcesContent":["import React from 'react'\nimport { TaskType } from '../Redux/Reduser'\nimport style from './Task.module.css'\n\ntype PropsType = {\n    task: Array<TaskType>\n    taskDone: (id: number) => void\n}\n\nconst Task: React.FC<PropsType> = props => {\n\n    const onDone = (id: number) => {\n        props.taskDone(id)\n    }\n\n    return <>\n            <div>{ [...props.task.filter(task => !task.done), ...props.task.filter(task => task.done)].map(task => {\n                return <div key={ task.id } className={ task.done ?  style.taskDone : style.task } onClick={ () => {onDone(task.id)} } >\n                            <span>{ task.done ?  <span style={{ fontSize: 22 }} className=\"material-icons\">check_box</span> : \n                           <span className=\"material-icons\" style={{ fontSize: 22}}>check_box_outline_blank</span>} </span>\n                           <div> { task.title } </div>\n                        </div>\n                \n            }) }</div>\n        </>\n}\n\nexport default Task","import { Dispatch } from 'redux'\nimport { InferActionType } from './ReduxStore'\n\nexport type TaskType = {\n    id: number\n    title: string\n    done: boolean\n}\n\nexport type InitialStateType = {\n   task: Array<TaskType>\n   taskText: string\n   isError: boolean\n   errorText: string\n}\n\nconst initialState: InitialStateType = {\n   task: [\n       {id: 0, title: 'Купить батон', done: false},\n       {id: 1, title: 'Купить молоко', done: true},\n       {id: 2, title: 'Купить мясо', done: false}\n   ],\n   taskText: '',\n   isError: false,\n   errorText: ''\n}\n\nconst Reduser = (state = initialState, action: ActionType) => {\n    switch (action.type){\n\n        case 'SET_UPDATE_TEXT':{\n            return { ...state, taskText: action.text }\n        }\n\n        case 'SET_TASK': {\n            return { ...state, task: [action.task, ...state.task] }\n        }\n\n        case 'SET_DONE': {\n            return { ...state, task: state.task.map(task => {\n                if (task.id === action.id) {\n                    return { ...task, done: !task.done }\n                }\n                return task\n                } ) \n            }\n        }\n\n        case 'DELETE_TASKS': {\n\n            let taskArray = state.task.filter(task => !task.done)\n            .map((task, index) => {\n                return { ...task, id: index }\n            })\n\n            return { ...state, task: taskArray }\n        }\n\n        case 'SET_ERROR_TEXT': {\n            return { ...state, \n                errorText: action.payload.errorText, \n                isError: action.payload.isError \n            }\n        }\n      \n        default: \n            return state\n    }\n}\n\ntype ActionType = InferActionType<typeof actions>\nconst actions = {\n    setUpdateText: (text: string) => ({ type: 'SET_UPDATE_TEXT', text} as const),\n    setTask: (task: TaskType) => ({ type: 'SET_TASK', task } as const),\n    setDone: (id: number) => ({ type: 'SET_DONE', id} as const),\n    deleteTasks: () => ({ type: 'DELETE_TASKS'} as const),\n    // setError: (error: boolean) => ({ type: 'SET_ERROR', error} as const),\n    setErrorText: (errorText: string, isError: boolean) => ({ type: 'SET_ERROR_TEXT', payload:{errorText, isError}} as const)\n}\n\nexport const updateInputText = (text: string) => {\n    return (dispatch: Dispatch<ActionType>) => {\n        dispatch(actions.setUpdateText(text))\n    }\n}\n\nexport const taskDone = (id: number) => {\n    return (dispatch: Dispatch<ActionType>) => {\n        dispatch(actions.setDone(id))\n    }\n}\n\nexport const addNewTask = (task: TaskType) => {\n    return (dispatch: Dispatch<ActionType>) => {\n        dispatch(actions.setTask(task))\n        dispatch(actions.setUpdateText(''))\n    }\n}\n\nexport const deleteTasks = () => {\n    return (dispatch: Dispatch<ActionType>) => {\n        dispatch(actions.deleteTasks())\n    }\n}\n\nexport const validateError = (errorText: string, isError: boolean) => {\n    return (dispatch: Dispatch<ActionType>) => {\n        dispatch(actions.setErrorText(errorText, isError))\n    }\n} \n\nexport default Reduser\n","import React from 'react'\nimport Task from './Task'\nimport { StateType } from '../Redux/ReduxStore'\nimport style from '../components/Task.module.css'\nimport { connect, ConnectedProps } from 'react-redux'\nimport { TaskType } from '../Redux/Reduser'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Card, Form } from 'react-bootstrap'\nimport { updateInputText, taskDone, addNewTask, deleteTasks, validateError } from '../Redux/Reduser'\n\ntype MapStateToPropsType = {\n    task: Array<TaskType>\n    taskText: string\n    isError: boolean\n    errorText: string\n}\n\ntype MapDispatchToPropsType = {\n    updateInputText: (text: string) => void\n    taskDone: (id: number) => void\n    deleteTasks: () => void\n    validateError: (errorText: string, isError: boolean) => void\n}\n\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType & PropsFromRedux\n\nconst TaskContainer: React.FC<PropsType> = (props) => {\n\n    const onChangeText = (event: React.ChangeEvent<HTMLInputElement>) => {\n        props.updateInputText(event.target.value)\n        props.validateError('', false)\n    }\n\n    const validate = () => {\n        if(props.taskText === ''){\n            props.validateError('Пустое поле', true)\n            return true\n        } else if(props.taskText.replace(/ /g, '') === '') {\n            props.validateError('Поле содержит одни пробелы', true)\n            return true\n        }\n        \n        else if(props.taskText.replace(/ /g, '') === '' || props.taskText.replace(/ /g, '').length <= 3){\n            props.validateError('Необходимо более трех символов', true)\n            return true\n        } \n    }\n\n    const addTask = () => {\n        \n        let task = {\n            id: props.task.length !== 0 ? props.task.length + 1 : 0,\n            title: props.taskText,\n            done: false\n        }\n        const isValide = validate()\n        if(!isValide){\n            props.addNewTask(task)\n        }\n\n    }\n\n    const addTaskEnter = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') {\n            addTask()\n        }\n    }\n\n    const onDelete = () => {\n        props.deleteTasks()\n    }\n\n    return <Card style={{ width: '400px', boxShadow: '0px 0px 5px #bec0c1' }}>\n                <Card.Header><b>TODO list</b><span onClick={ () => {onDelete()} } className=\"material-icons\" style={{ fontSize: 23, float: 'right', cursor: 'pointer' }}>delete</span></Card.Header>\n                    <Card.Body>\n                        <Task task={ props.task } taskDone={ props.taskDone } />\n                    </Card.Body>\n                    <Card.Footer className={ style.task }>\n                    <span onClick={ () => { addTask() } } className=\"material-icons\" style={{ fontSize: 30 }}>add</span>\n                    <Form.Control size=\"sm\" type=\"text\" value={props.taskText} onChange={ onChangeText } onKeyPress={ addTaskEnter } />\n                    </Card.Footer>\n                    { props.isError ? <div className={ style.error }>Ошибка: {props.errorText} </div> : null }\n            </Card>\n}\n\nconst mapStateToProps = (state: StateType): MapStateToPropsType => {\n    return {\n        task: state.Reduser.task,\n        taskText: state.Reduser.taskText,\n        isError: state.Reduser.isError,\n        errorText: state.Reduser.errorText\n    }\n}\n\nconst connector = connect(mapStateToProps, { updateInputText, taskDone, addNewTask, deleteTasks, validateError })\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\nexport default connector(TaskContainer)\n","import React from 'react';\nimport './App.css';\nimport TaskContainer from './components/TaskContainer'\n\nconst App = () => {\n\n  return (\n    <div className=\"App\"> \n      <TaskContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport Reduser from './Reduser'\n\nlet rootReduser = combineReducers({\n    Reduser\n})\n\ntype ReduserType = typeof rootReduser\nexport type StateType = ReturnType<ReduserType>\n\ntype PropetiesType<T> = T extends { [key: string]: infer U } ? U : never\nexport type InferActionType<T extends { [key: string]: (...args: any) => any }> =  ReturnType<PropetiesType<T>>\n\nlet store = createStore(rootReduser, applyMiddleware(thunkMiddleware))\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './Redux/ReduxStore'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"Task_task__1OJLB\",\"taskDone\":\"Task_taskDone__390MJ\",\"error\":\"Task_error__1Ruaf\"};"],"sourceRoot":""}